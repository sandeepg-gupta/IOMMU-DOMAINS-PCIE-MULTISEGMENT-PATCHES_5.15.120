diff --git a/drivers/iommu/amd/amd_iommu.h b/drivers/iommu/amd/amd_iommu.h
index 6606bdc4cfc4..86dfdaedd8f7 100644
--- a/drivers/iommu/amd/amd_iommu.h
+++ b/drivers/iommu/amd/amd_iommu.h
@@ -127,8 +127,7 @@ static inline int get_pci_sbdf_id(struct pci_dev *pdev)
 extern bool translation_pre_enabled(struct amd_iommu *iommu);
 extern bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,
 					 struct device *dev);
-extern int __init add_special_device(u8 type, u8 id, u16 *devid,
-				     bool cmd_line);
+extern int __init  add_special_device(u8 type, u8 id, u32 *devid, bool cmd_line);
 
 #ifdef CONFIG_DMI
 void amd_iommu_apply_ivrs_quirks(void);
diff --git a/drivers/iommu/amd/init.c b/drivers/iommu/amd/init.c
index 091ce7ec6395..155f59fab6d0 100644
--- a/drivers/iommu/amd/init.c
+++ b/drivers/iommu/amd/init.c
@@ -3349,61 +3349,36 @@ static int __init parse_ivrs_hpet(char *str)
 
 static int __init parse_ivrs_acpihid(char *str)
 {
-	u32 seg = 0, bus, dev, fn;
-	char *hid, *uid, *p;
-	char acpiid[ACPIHID_UID_LEN + ACPIHID_HID_LEN] = {0};
-	int ret, i;
-
-	ret = sscanf(str, "[%x:%x.%x]=%s", &bus, &dev, &fn, acpiid);
-	if (ret != 4) {
-		ret = sscanf(str, "[%x:%x:%x.%x]=%s", &seg, &bus, &dev, &fn, acpiid);
-		if (ret != 5) {
-			pr_err("Invalid command line: ivrs_acpihid(%s)\n", str);
-			return 1;
-		}
-	}
-
-	/* We have the '@', make it the terminator to get just the acpiid */
-	*addr++ = 0;
-
-	if (strlen(str) > ACPIID_LEN + 1)
-		goto not_found;
-
-	if (sscanf(str, "=%s", acpiid) != 1)
-		goto not_found;
-
-	if (sscanf(addr, "%x:%x.%x", &bus, &dev, &fn) == 3 ||
-	    sscanf(addr, "%x:%x:%x.%x", &seg, &bus, &dev, &fn) == 4)
-		goto found;
-
-not_found:
-	pr_err("Invalid command line: ivrs_acpihid%s\n", str);
-	return 1;
-
-found:
-	p = acpiid;
-	hid = strsep(&p, ":");
-	uid = p;
-
-	if (!hid || !(*hid) || !uid) {
-		pr_err("Invalid command line: hid or uid\n");
-		return 1;
-	}
-
-	/*
-	 * Ignore leading zeroes after ':', so e.g., AMDI0095:00
-	 * will match AMDI0095:0 in the second strcmp in acpi_dev_hid_uid_match
-	 */
-	while (*uid == '0' && *(uid + 1))
-		uid++;
-
-	i = early_acpihid_map_size++;
-	memcpy(early_acpihid_map[i].hid, hid, strlen(hid));
-	memcpy(early_acpihid_map[i].uid, uid, strlen(uid));
-	early_acpihid_map[i].devid = IVRS_GET_SBDF_ID(seg, bus, dev, fn);
-	early_acpihid_map[i].cmd_line	= true;
-
-	return 1;
+        u32 seg = 0, bus, dev, fn;
+        char *hid, *uid, *p;
+        char acpiid[ACPIHID_UID_LEN + ACPIHID_HID_LEN] = {0};
+        int ret, i;
+
+        ret = sscanf(str, "[%x:%x.%x]=%s", &bus, &dev, &fn, acpiid);
+        if (ret != 4) {
+                ret = sscanf(str, "[%x:%x:%x.%x]=%s", &seg, &bus, &dev, &fn, acpiid);
+                if (ret != 5) {
+                        pr_err("Invalid command line: ivrs_acpihid(%s)\n", str);
+                        return 1;
+                }
+        }
+
+        p = acpiid;
+        hid = strsep(&p, ":");
+        uid = p;
+
+        if (!hid || !(*hid) || !uid) {
+                pr_err("Invalid command line: hid or uid\n");
+                return 1;
+        }
+
+        i = early_acpihid_map_size++;
+        memcpy(early_acpihid_map[i].hid, hid, strlen(hid));
+        memcpy(early_acpihid_map[i].uid, uid, strlen(uid));
+        early_acpihid_map[i].devid = IVRS_GET_SBDF_ID(seg, bus, dev, fn);
+        early_acpihid_map[i].cmd_line   = true;
+
+        return 1;
 }
 
 __setup("amd_iommu_dump",	parse_amd_iommu_dump);
